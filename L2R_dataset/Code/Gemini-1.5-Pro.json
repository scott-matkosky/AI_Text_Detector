["```python\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    This function is on a mission to find those sneaky close numbers! \ud83d\udd75\ufe0f\u200d\u2640\ufe0f\n\n    Given a list of numbers, it races through them to see if any two are closer\n    to each other than the given threshold.  \n\n    For example:\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n```\n", "```python\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Given a string containing multiple groups of nested parentheses, this function carefully\n    disassembles it into its constituent parenthetical groups. \n\n    It's important to note that we're dealing with balanced groups here \u2013 each open parenthesis \n    dutifully awaits its closing counterpart.  These groups stand independent, choosing not to nest \n    within each other. Spaces in the input? We'll politely ignore them.\n\n    Example:\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n```\n", "```python\ndef truncate_number(number: float) -> float:\n    \"\"\" \n    This function accepts a positive floating-point number as input. Recognizing that such a number \n    can be expressed as the sum of an integer part (the largest integer smaller than the given number) \n    and a decimal part (the remaining portion, always less than 1), the function returns the decimal \n    component of the input.\n\n    Example:\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number % 1.0\n```", "```python\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" \n    Given a list of integers representing deposit and withdrawal operations on a bank account \n    initialized with a zero balance, this function determines whether the account balance ever \n    falls below zero. \n\n    The function processes each operation sequentially, maintaining an updated balance. \n    If at any point the balance dips below zero, the function immediately returns True, \n    indicating an instance of insufficient funds. Otherwise, if all operations are processed \n    without encountering a negative balance, the function returns False.\n\n    Examples:\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n```\n", "```python\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\"\n    This function takes a list of numbers and strategically injects a given delimiter \n    between every pair of consecutive elements. \n\n    Imagine weaving a thread through a string of beads - that's what this function \n    does, with the delimiter acting as our thread, seamlessly interlacing the numbers. \n\n    Examples:\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimiter)\n\n    result.append(numbers[-1])\n\n    return result\n```\n", "```python\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    This function takes a string containing space-separated groups of nested parentheses \n    and calculates the maximum nesting depth for each group. \n\n    For example, the group '(()())' has a maximum nesting depth of 2, \n    while '((()))' reaches a depth of 3.\n\n    The function returns a list of these depths, one for each group in the input string.\n\n    Example:\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n```\n\n", "```python\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    This function carefully examines a list of strings, meticulously searching \n    for those that harbor a specific substring within them. Like a detective \n    seeking clues, it identifies and returns a new list containing only the \n    strings that meet this criterion.\n\n    Examples:\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring in x]\n```", "```python\nfrom typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    This function embodies the spirit of teamwork! Given a list of integers, it calculates both \n    their sum and product, demonstrating that together, we can achieve more. \n\n    Even with an empty list, it doesn't give up! It sets the sum to 0 and the product to 1, \n    showing that we always have a starting point.\n\n    Let's conquer those numbers together!\n\n    Examples:\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n```\n\n\n", "```python\nfrom typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    This function takes us on a journey through a list of numbers, always looking back \n    to remember the greatest value encountered along the way.  Like a seasoned traveler \n    collecting memories, it constructs a new list, each element reflecting the highest \n    peak scaled up to that point. \n\n    Example:\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n```\n\n\n", "```python\ndef is_palindrome(string: str) -> bool:\n    \"\"\"\n    Determines if a given string is a palindrome, returning True if it is and False otherwise. \n    \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"\n    Constructs and returns the shortest palindrome that starts with a given input string. \n\n    The algorithm identifies the longest palindromic suffix of the input string. Then, it appends the \n    reverse of the prefix preceding the palindromic suffix to the end of the original string, resulting\n    in the desired palindrome.\n\n    Examples:\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n```\n\n", "```python\nfrom typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    This function takes two binary strings, `a` and `b`, as input and returns their bitwise XOR \n    result as another binary string. \n    \n    For each corresponding pair of bits in `a` and `b`, it calculates the XOR operation, \n    resulting in a '1' if the bits are different and a '0' if they are the same.\n\n    Example:\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))\n\n```\n", "```python\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    This function takes a list of strings as input and aims to find the longest string within it. \n\n    - If multiple strings share the title of \"longest,\" the function returns the first one encountered. \n    - If the input list is empty, the function returns None to signify that no longest string exists.\n\n    Examples:\n    >>> longest([])\n    None\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n\n```\n\n", "```python\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    This function calculates and returns the greatest common divisor (GCD) of two integers,\n    'a' and 'b'.\n\n    The GCD is the largest positive integer that divides both input integers without leaving a remainder.\n\n    The function uses Euclid's algorithm, which efficiently computes the GCD through repeated modulo \n    operations. It iteratively replaces the larger of the two numbers with the remainder of their \n    division by the smaller number until the remainder becomes zero. At that point, the non-zero\n    number represents the GCD.\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n```\n\n\n", "```python\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    This function generates a list of all possible prefixes of a given string, \n    ordered meticulously from the shortest to the longest. \n\n    Starting with the first character, it progressively builds up prefixes \n    by including one more character at a time. Each prefix represents \n    a segment of the string, starting from the beginning and extending \n    to a specific point. \n\n    Example:\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n```\n\n", "```python\ndef string_sequence(n: int) -> str:\n    \"\"\"\n    You got this! This function takes a number 'n' and creates a friendly string of numbers \n    starting from 0 all the way up to and including 'n', separated by spaces. It's like \n    counting from 0 to 'n' but in string form!\n\n    Examples:\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join([str(x) for x in range(n + 1)])\n```\n\n", "```python\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Calculates the number of unique characters in a given string, \n    disregarding case sensitivity.\n\n    Examples:\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n```", "```python\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Okay, imagine you have this string of letters and symbols, like a secret code for music! \ud83c\udfb6 \n    \n    It's written in a special way: \n      - 'o' means a whole note, like holding a note for four beats. \n      - 'o|' means a half note, holding it for two beats.\n      - '.|' means a quarter note, just a quick one-beat tap.\n\n    Your job is to decode this music string and tell me how many beats each note lasts. \n\n    For example, if you get 'o o| .|', you'd tell me: \"Four beats, two beats, one beat!\" \n\n    Let's see what you can decipher! \ud83d\udd75\ufe0f\u200d\u2640\ufe0f\n\n    Example:\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n```\n\n\n", "```python\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    This just in! We've received a breaking news alert: a function that counts the occurrences \n    of a substring within a string, even considering those tricky overlapping cases!\n\n    Our sources report:\n    - In a stunning turn of events, an empty string contained zero occurrences of any substring.\n    - The string \"aaa\" witnessed a whopping three occurrences of the substring \"a.\"\n    - And in a remarkable discovery, the string \"aaaa\" revealed three instances of the substring \"aa.\"\n\n    Stay tuned for further updates on this developing story!\n\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n```\n\n\n", "```python\nfrom typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    This function takes a string containing space-separated number words \n    from 'zero' to 'nine' and returns a new string with these words sorted \n    in ascending numerical order.\n\n    Example:\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n```\n\n\n\n", "```python\nfrom typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    Given a list of numbers containing at least two elements, this function identifies\n    the pair of numbers closest to each other in terms of absolute difference. \n\n    The function returns the closest pair as a tuple, with the smaller number appearing \n    before the larger number. If multiple pairs share the same minimal distance, \n    the function will return one such pair. \n\n    Examples:\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n```\n\n", "```python\nfrom typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    This function accepts a list of floating-point numbers, containing a minimum of two elements,\n    and performs a linear transformation on its elements. The transformation ensures that the \n    smallest number in the input list is mapped to 0.0, while the largest number is mapped to 1.0. \n    The function returns a new list containing the transformed values.\n\n    Example:\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n```\n\n", "```python\nfrom typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    Imagine you have a mixed bag of things, like letters, numbers, and maybe even \n    some strange objects! This function is here to help you find only the integers \n    (those nice whole numbers) hiding in your list. It's like a detective that \n    carefully examines each item and only keeps the ones that match perfectly! \n\n    Examples:\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values if isinstance(x, int)]\n```\n\n\n", "```python\ndef strlen(string: str) -> int:\n    \"\"\"Returns the length of a given string.\n\n    Examples:\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n```\n\n", "```python\ndef largest_divisor(n: int) -> int:\n    \"\"\"\n    Given an integer 'n', this function determines the largest integer, \n    strictly smaller than 'n', that divides 'n' evenly. \n\n    It iterates through potential divisors in reverse order, starting from \n    'n - 1' and decrementing down to 1.  For each potential divisor, it checks \n    if the modulo operation (%) of 'n' divided by the divisor results in 0. \n    If so, indicating that the divisor divides 'n' evenly, the function immediately \n    returns that divisor as the largest divisor found.\n\n    Example:\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n```\n\n\n\n", "```python\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Let's break it down! This function takes an integer 'n' and embarks on a journey \n    to uncover its prime factors. Like a treasure hunt for the building blocks of a \n    number, we'll find each prime factor and list it as many times as it appears in \n    the factorization. \n\n    Think of it as creating a recipe for our number 'n', where each prime factor \n    is an essential ingredient!\n\n    Let's unlock those prime factors!\n\n    Examples:\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n```\n\n\n\n", "```python\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only \n    the unique elements from the input list, preserving their original order. \n\n    It efficiently identifies and removes any elements that appear more than once, \n    ensuring that each remaining element is unique.\n\n    Example:\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n```\n\n\n\n", "```python\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Imagine you have a magic wand that can flip letters upside down! \ud83e\ude84  \n\n    This function is like that wand.  Give it a word with big and small letters, \n    and it flips them around: \n       - Small letters become BIG letters!\n       - BIG letters become small letters!\n\n    Example:\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n```\n\n\n\n", "```python\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"\n    This function takes a list of strings and combines them, nose-to-tail, \n    into a single, unified string.  Think of it like joining puzzle pieces \n    to create a complete picture! \n\n    Examples:\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n```\n\n\n\n", "```python\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Alright, so you've got this list of words, right?  And you want to find the \n    ones that start with a certain something \u2013 let's call it a \"prefix.\" Think of \n    it like picking out all the cookies from a jar that have your favorite sprinkle \n    on top! \ud83c\udf6a\n\n    That's what this function does!  Give it a list of words and a \"prefix,\" and it'll \n    hook you up with a new list of words that all begin with that \"prefix.\"  Pretty cool, huh?\n\n    Examples:\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n```\n\n\n\n", "```python\ndef is_prime(n):\n    \"\"\"\n    Determines definitively whether a given number is a prime number.\n\n    A prime number is unequivocally defined as a natural number greater than 1 that has \n    exactly two distinct positive divisors: 1 and itself. \n\n    This function employs a deterministic algorithm to ascertain the primality of the input number.\n\n    Examples:\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n```\n\n\n", "```python\nimport math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Our story begins with a humble polynomial, its coefficients 'xs' whispering secrets of its shape. \n    This function, a master interpreter, deciphers the polynomial's language at a given point 'x', \n    revealing the value hidden within its curves and bends. \n    It carefully calculates xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n, \n    like a mapmaker charting the polynomial's path.\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"\n    But our tale doesn't end there.  Deep within the polynomial's heart lies a secret \u2013 a \"zero,\" \n    a point 'x' where the polynomial's value vanishes.  \n\n    Our hero, 'find_zero', embarks on a quest to uncover this elusive point.  Armed with the polynomial's \n    coefficients 'xs', it knows that success is not guaranteed for every polynomial. \n\n    Yet, with unwavering determination, 'find_zero' focuses on polynomials with an even number \n    of coefficients and a prominent non-zero coefficient, a beacon hinting at a solution.\n\n    Like an explorer navigating a vast landscape, 'find_zero' searches for the point where \n    poly(x) = 0.  It sets out from a starting point and meticulously narrows its search, \n    always closing in on the zero.  \n\n    And finally, when the search becomes as precise as 1e-10, 'find_zero' declares victory, \n    having found the hidden zero within the polynomial's depths. \n\n    Examples:\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n```\n\n\n\n\n", "```python\ndef sort_third(l: list):\n    \"\"\"\n    This function takes a list and rearranges it so that only the elements \n    at indices divisible by 3 are sorted, while the rest of the elements remain \n    in their original positions.\n\n    Specifically, it creates a new list where:\n      - Elements at indices not divisible by 3 are identical to the input list.\n      - Elements at indices divisible by 3 are sorted in ascending order.\n\n    Examples:\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n```\n\n\n\n", "```python\ndef unique(l: list):\n    \"\"\"\n    This function takes a list and returns a new list containing only the unique \n    elements from the input, sorted in ascending order.\n\n    Example:\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))\n```\n\n", "```python\ndef max_element(l: list):\n    \"\"\"\n    This function takes a list of numbers and returns the largest number \n    in the list. \n\n    Examples:\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n```\n\n\n\n", "```python\ndef fizz_buzz(n: int):\n    \"\"\"\n    Esteemed colleagues, I present to you a function of remarkable ingenuity: fizz_buzz.\n\n    Given a positive integer 'n,' this function embarks on a meticulous examination of all \n    integers less than 'n' that exhibit divisibility by either 11 or 13. For each such integer, \n    it meticulously tallies the occurrences of the numeral 7 within its decimal representation.\n\n    Allow me to illustrate its elegance with a few examples:\n\n    - When presented with the input 50, the function, after due diligence, shall pronounce the result to be 0.\n    - However, upon receiving the input 78, it shall, with equal assiduity, declare the result to be 2.\n    - And finally, when confronted with the input 79, it shall, without hesitation, pronounce the result to be 3.\n\n    Thus, I commend to you the function fizz_buzz, a testament to the power of computational analysis.\n    \"\"\"\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n```\n\n\n\n\n", "```python\ndef sort_even(l: list):\n    \"\"\"\n    Imagine you have a list of numbers.  This function goes through the list \n    and does a little sorting magic, but only for the numbers at even positions!\n\n    - The numbers in the odd positions stay exactly where they are.\n    - The numbers in the even positions get sorted from smallest to largest.\n\n    Let's look at some examples:\n\n    - [1, 2, 3] stays the same because there's only one even-positioned number.\n    - [5, 6, 3, 4] becomes [3, 6, 5, 4] because 3 and 5 are in even positions\n      and 3 is smaller than 5.\n\n    It's like sorting only part of your toys! \ud83e\uddf8\n    \"\"\"\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n```\n\n\n\n", "```python\ndef encode_cyclic(s: str):\n    \"\"\"\n    This function implements a cyclic encoding algorithm that operates on groups \n    of three characters within a string.  \n\n    First, the input string 's' is divided into groups of three characters. If the \n    length of the string is not divisible by three, the last group will have fewer \n    than three characters.\n\n    Next, the algorithm processes each group individually. For groups with exactly \n    three characters, a cyclic shift is performed, rotating the characters one \n    position to the left.  Groups with fewer than three characters are left unchanged.\n\n    Finally, the modified groups are concatenated back together to produce the encoded \n    output string.\n\n    Example:\n    \"abcdef\" -> [\"abc\", \"def\"] -> [\"bca\", \"efd\"] -> \"bcaefd\"\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    This function decodes a string that has been encoded using the 'encode_cyclic' \n    function.  It leverages the property that applying the cyclic encoding \n    algorithm twice effectively reverses the encoding, thus restoring the original \n    string.\n    \"\"\"\n    return encode_cyclic(encode_cyclic(s))\n```\n\n\n\n\n\n", "```python\ndef prime_fib(n: int):\n    \"\"\"\n    Distinguished guests, esteemed colleagues, I present to you the function prime_fib.\n\n    Given an input integer 'n,' this function endeavors to locate and return the n-th \n    element within the sequence of numbers that satisfy the dual criteria of being \n    both a Fibonacci number and a prime number.\n\n    Allow me to demonstrate its elegance through a series of illustrative examples:\n\n     - prime_fib(1) yields the result 2.\n     - prime_fib(2) produces the result 3.\n     - prime_fib(3) furnishes the result 5.\n     - prime_fib(4) delivers the result 13.\n     - prime_fib(5) presents the result 89.\n\n    In essence, this function elegantly traverses the realms of both Fibonacci and \n    prime numbers, identifying those exceptional candidates that grace both esteemed sequences.\n    \"\"\"\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n```\n\n\n\n\n\n", "```python\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    This function checks if a given list of integers contains three distinct \n    elements that add up to zero. If it finds such a triple, it returns True; \n    otherwise, it returns False.\n\n    Examples:\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n```\n\n\n\n", "```python\ndef car_race_collision(n: int):\n    \"\"\"\n    Picture this: a never-ending straight road with 'n' cars speeding from \n    left to right and another 'n' cars racing from right to left.  \n\n    These cars are super tough, so even if they crash head-on (which they will, \n    since they're on the same road!), they just keep going as if nothing happened. \ud83d\udca5\n\n    This function calculates how many of these collisions will occur.  Since each \n    of the 'n' cars going one way can potentially collide with any of the 'n' cars \n    going the other way, there are a total of n * n (or n squared) possible collisions.\n    \"\"\"\n    return n**2\n```\n\n\n\n", "```python\ndef incr_list(l: list):\n    \"\"\"\n    This function takes a list of numbers and creates a new list \n    where each number is increased by 1.\n\n    Examples:\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [(e + 1) for e in l]\n```\n\n\n\n", "```python\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    Okay, so imagine you have a list of numbers. \ud83e\udd14  This function is like a detective \n    trying to find a special pair of numbers within that list. \ud83d\udd75\ufe0f\u200d\u2640\ufe0f\n\n    The mission?  To see if any two different numbers in the list add up to zero! \n\n    If the detective finds such a pair, they'll shout \"Eureka!\" and return True. \n    But if they search the entire list and can't find a match, they'll sadly return False.\n    \"\"\"\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n```\n\n\n\n", "```python\ndef change_base(x: int, base: int):\n    \"\"\"\n    This function converts a given integer 'x' from its original base \n    to a specified target 'base' and returns the result as a string \n    representation.  The function is designed for target bases less than 10. \n\n    Example:\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n```\n\n\n\n", "```python\ndef triangle_area(a, h):\n    \"\"\"\n    Need to calculate the area of a triangle?  No problem!  Just give me the \n    length of one of its sides and its height, and I'll do the math for you! \ud83d\udcd0\n\n    It's like magic, but with triangles! \u2728\n\n    Example:\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2.0\n```\n\n\n\n", "```python\ndef fib4(n: int):\n    \"\"\"\n    Imagine a number sequence that's like a family gathering, where each number \n    depends on the four that came before it!  That's the Fib4 sequence! \ud83d\ude04\n\n    Here's how it works:\n\n    - It starts with these four numbers:  0, 0, 2, 0\n    - To get the next number, you add up the last four numbers.\n\n    So, it goes like this: 0, 0, 2, 0, 4, 8, 14... and keeps going!\n\n    This function is a clever way to find any number in this sequence without \n    having to calculate all the previous ones. It's like a shortcut!\n\n    Example:\n    >>> fib4(5)  #  Gives you the 5th number in the sequence\n    4\n    \"\"\"\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n```\n\n\n\n", "```python\ndef median(l: list):\n    \"\"\"\n    Imagine lining up all the numbers in the list from smallest to largest.  \n    The median is the \"middle value\" \u2013 the number that's right in the center. \n\n    - If there's an odd number of numbers, the median is the one in the middle.\n    - If there's an even number, the median is the average of the two middle numbers.\n\n    It's like finding the middle seat in a movie theater row! \ud83c\udf7f\n\n    Examples:\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n```\n\n\n\n\n\n", "```python\ndef is_palindrome(text: str):\n    \"\"\"\n    This function determines whether a given string is a palindrome.\n\n    A palindrome is a sequence of characters that reads the same backward as forward.\n\n    Examples:\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n```\n\n\n\n\n\n", "```python\ndef modp(n: int, p: int):\n    \"\"\"\n    This function calculates the remainder when 2 raised to the power of 'n' \n    is divided by 'p'.  In simpler terms, it computes (2^n) % p.\n\n    Examples:\n    >>> modp(3, 5)  # 2^3 % 5 = 8 % 5 = 3\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n```\n\n\n\n\n\n", "```python\ndef encode_shift(s: str):\n    \"\"\"\n    Psst! Wanna encode a secret message?  This function shifts each letter \n    five places down the alphabet. It's like using a secret decoder ring! \ud83e\udd2b\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    Got a secret message encoded with that fancy encode_shift thing?  \n    Well, this function will crack the code! \n    Just feed it the encoded message, and it'll shift the letters back \n    to their original spots.  Decoding magic! \u2728\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n```\n\n\n\n", "```python\ndef remove_vowels(text):\n    \"\"\"\n    This function takes a string as input and returns a modified version \n    of the string with all vowels removed. \n\n    It processes the input string character by character. If a character is \n    a vowel (considering both uppercase and lowercase), it is excluded from \n    the output string.  Non-vowel characters are retained in their original order.\n\n    Examples:\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n```\n\n\n\n\n\n", "```python\ndef below_threshold(l: list, t: int):\n    \"\"\"\n    This function provides a definitive answer to the crucial question: \n    are all numbers within a given list below a specified threshold?\n\n    With unwavering accuracy, it examines each element of the input list 'l.'\n    If even a single element is found to be greater than or equal to the threshold 't,' \n    the function immediately returns False, signifying that not all elements satisfy \n    the criterion.\n\n    Only if every single element in the list is strictly less than the threshold \n    will the function return True, confidently declaring that the condition holds.\n\n    Examples:\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for e in l:\n        if e >= t:\n            return False\n    return True\n```\n\n\n\n\n\n", "```python\ndef add(x: int, y: int):\n    \"\"\"\n    Let's add two numbers together! It's like combining two groups of \n    objects \u2013 you start with 'x' amount and then put 'y' more with them.  \n    This function does the counting for you! \ud83d\ude0a\n\n    Examples:\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n```\n\n\n\n\n\n", "```python\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Imagine taking apart two words, letter by letter, and tossing their letters \n    into two separate bowls.  Then, we stir those bowls, like mixing up a \n    delicious word salad! \ud83e\udd57\n\n    This function tells us if those two bowls contain the same unique letters, \n    regardless of how many times each letter appears. It's like checking if \n    we used the same ingredients in our word salads!\n\n    Examples:\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')  # Same letters, different amounts\n    True\n    >>> same_chars('abcd', 'dddddddabc')  # Same letters, even with repetition\n    True\n    >>> same_chars('eabcd', 'dddddddabc')  # 'e' is missing in the second word\n    False\n    \"\"\"\n    return set(s0) == set(s1)\n```\n\n\n\n\n\n", "```python\ndef fib(n: int):\n    \"\"\"\n    This function calculates the n-th number in the Fibonacci sequence.\n\n    The Fibonacci sequence is a series of numbers where each number is \n    the sum of the two preceding ones. It starts with 0 and 1.\n\n    Examples:\n    >>> fib(10) # The 10th Fibonacci number is 55\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n```\n\n\n\n", "```python\ndef correct_bracketing(brackets: str):\n    \"\"\"\n    This function checks if a string containing only '<' and '>' characters \n    represents a correctly bracketed expression. \n\n    It iterates through the string, treating '<' as an opening bracket and \n    '>' as a closing bracket.  For each opening bracket, a counter ('depth') \n    is incremented, and for each closing bracket, it's decremented. \n\n    The function ensures that:\n      - The counter never goes negative, indicating an excess of closing brackets.\n      - The counter is zero at the end, implying that all opening brackets \n        have matching closing brackets.\n\n    Examples:\n    >>> correct_bracketing(\"<\")  # Missing a closing bracket\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")  # Starts with a closing bracket\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n```\n\n\n\n\n\n\n", "```python\ndef monotonic(l: list):\n    \"\"\"\n    This function determines whether the elements within a given list \n    exhibit a monotonic trend, meaning they are either consistently \n    increasing or consistently decreasing.\n\n    - Increasing Trend: Each element is greater than or equal to the preceding element.\n    - Decreasing Trend: Each element is less than or equal to the preceding element.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])  # Increasing trend\n    True\n    >>> monotonic([1, 20, 4, 10])  # Neither increasing nor decreasing\n    False\n    >>> monotonic([4, 1, 0, -10]) # Decreasing trend\n    True\n    \"\"\"\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n```\n\n\n\n\n\n", "```python\ndef common(l1: list, l2: list):\n    \"\"\"\n    Given two lists, this function identifies and returns a new list \n    containing only the elements present in both input lists. \n\n    The resulting list features only unique elements, eliminating any \n    duplicates, and is presented in ascending order.\n\n    Examples:\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n```\n\n\n\n\n\n", "```python\ndef largest_prime_factor(n: int):\n    \"\"\"\n    This function finds the biggest prime number that divides evenly \n    into a given number 'n'.  It assumes that 'n' is greater than 1 \n    and not a prime number itself.\n\n    Example:\n    >>> largest_prime_factor(13195) # The largest prime factor of 13195 is 29\n    29\n    \"\"\"\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n\n```\n\n\n\n\n\n\n\n", "```python\ndef sum_to_n(n: int):\n    \"\"\"\n    Ever played that game where you have to add up a bunch of numbers \n    really quickly?  This function is like a master at that! \ud83c\udfc6\n\n    You give it a number 'n,' and it races through all the numbers \n    from 1 to 'n,' adding them up like a champion. \n\n    Example:\n    >>> sum_to_n(5)  # It's like adding 1 + 2 + 3 + 4 + 5\n    15\n    \"\"\"\n    return sum(range(n + 1))\n```\n\n\n\n\n\n", "```python\ndef correct_bracketing(brackets: str):\n    \"\"\"\n    This function checks if a string containing only '(' and ')' characters \n    has correctly balanced parentheses. This means that each opening parenthesis \n    has a corresponding closing parenthesis. \n\n    Examples:\n    >>> correct_bracketing(\"(\")  # Missing a closing parenthesis\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\") \n    True\n    >>> correct_bracketing(\")(()\") # More closing parentheses than opening ones\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n```\n\n\n\n\n\n", "```python\ndef derivative(xs: list):\n    \"\"\"\n    This function takes a list of coefficients representing a polynomial \n    and returns a new list representing the derivative of that polynomial.\n\n    For example, the list [3, 1, 2, 4, 5] represents the polynomial \n    3 + x + 2x^2 + 4x^3 + 5x^4, and its derivative is \n    1 + 4x + 6x^2 + 12x^3 + 20x^4, which is represented by \n    [1, 4, 12, 20].\n\n    Examples:\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3]) \n    [2, 6]\n    \"\"\"\n    return [(i * x) for i, x in enumerate(xs)][1:]\n```\n\n\n\n\n\n", "```python\ndef fibfib(n: int):\n    \"\"\"\n    It is asserted that a function can be constructed to efficiently compute \n    the n-th element of the FibFib number sequence, defined as follows:\n\n    - fibfib(0) == 0\n    - fibfib(1) == 0\n    - fibfib(2) == 1\n    - fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n    The following examples provide compelling evidence to support this assertion:\n\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n\n    The provided code, with its recursive structure, embodies a clear and \n    concise solution to the problem of calculating the n-th FibFib number. \n    Therefore, the initial assertion is demonstrably valid.\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n```\n\n\n\n", "```python\ndef vowels_count(s):\n    \"\"\"\n    This function counts the vowels in a given string, \n    considering 'y' as a vowel only when it appears at the end of the string. \n\n    Examples:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n```\n\n\n\n\n\n\n", "```python\ndef circular_shift(x, shift):\n    \"\"\"\n    Imagine writing a number on a piece of paper and then spinning that paper \n    around like a wheel! \ud83c\udfa1  That's what this function does \u2013 it shifts the \n    digits of a number in a circular motion.\n\n    - You give it a number 'x' and tell it how many positions to shift it, 'shift'.\n    - If 'shift' is greater than the number of digits, it flips the number backward!\n\n    Example:\n    >>> circular_shift(12, 1)  # Shifts the digits of '12' one position to the right\n    \"21\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n```\n\n\n\n\n\n", "```python\ndef digitSum(s):\n    \"\"\"\n    This function calculates the sum of the ASCII codes of uppercase letters \n    in a given string.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if s == \"\": \n        return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n```", "```python\ndef fruit_distribution(s, n):\n    \"\"\"\n    Imagine you walk into a fruit party, and there's this giant basket overflowing \n    with apples, oranges, and mangoes! \ud83c\udf4e\ud83c\udf4a\ud83e\udd6d  \n\n    You're given a clue about how many apples and oranges there are, \n    like \"5 apples and 6 oranges\", and you know the total number of fruits in \n    the basket is 19.  Can you figure out how many delicious mangoes are hiding in there? \ud83e\udd14\n\n    This function does exactly that! It takes the fruit clue and the total \n    number of fruits and cleverly calculates how many mangoes are in the mix! \n\n    It's like being a fruit detective! \ud83d\udd75\ufe0f\u200d\u2640\ufe0f\n    \"\"\"\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n```\n\n\n\n\n\n", "```python\ndef pluck(arr):\n    \"\"\"\n    Imagine yourself wandering through an orchard, coming across a tree laden with \n    fruit. Each fruit on this tree is labeled with a number, representing its ripeness. \ud83c\udf33\n\n    Your task is to select the most tempting fruit \u2013 the one with the smallest even \n    number.  If you find multiple fruits with the same enticing even number, choose \n    the one closest to you (the one with the smallest index). \ud83c\udf4e\n\n    This function simulates that very task! Given a list representing a branch \n    of the tree, it seeks out the most desirable fruit and returns both its \n    value and index in a neat little list, like a treasure map to the perfect pick. \n\n    But beware, if the branch is bare or holds no fruits with even numbers, \n    the function returns an empty list, signaling a fruitless search.  \n    \"\"\"\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n```\n\n\n\n\n\n", "```python\ndef search(lst):\n    \"\"\"\n    Within the tapestry of numbers, a challenge arises \u2013 to uncover the most \n    prevalent integer that surpasses its own frequency. \n\n    This function embarks on a quest through a non-empty list of positive integers, \n    seeking the grandest integer that surpasses a simple threshold: its own count.\n\n    Like a discerning collector, the function meticulously tallies the occurrences \n    of each integer, carefully recording their frequency. It then embarks on a \n    deliberate examination of each integer and its corresponding count.\n\n    Should an integer be found whose grandeur surpasses or equals its own prevalence, \n    the function, with an air of triumph, reveals this remarkable number. \n\n    However, in the absence of such a distinguished integer, the function gracefully \n    admits defeat, signaling the absence of such a value with a solemn -1.\n    \"\"\"\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n```\n\n\n\n\n\n\n\n", "```python\ndef strange_sort_list(lst):\n    \"\"\"\n    Imagine sorting a list of numbers, but instead of going in a boring old \n    ascending or descending order, we spice things up! \u2728 \n\n    This function does a \"strange sort\": it picks the smallest number, \n    then the largest from what's left, then the smallest again, and so on. \n    It's like a dance where the numbers take turns leading! \ud83d\udc83\ud83d\udd7a\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n```\n\n\n\n\n\n\n\n", "```python\ndef triangle_area(a, b, c):\n    \"\"\"\n    This function calculates the area of a triangle given the lengths \n    of its three sides. If the given side lengths do not form a valid \n    triangle, it returns -1.\n\n    A valid triangle is formed when the sum of any two sides is greater \n    than the length of the remaining side.\n\n    Examples:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n```\n\n\n\n", "```python\ndef will_it_fly(q, w):\n    \"\"\"\n    Get ready for takeoff! \ud83d\ude80  This function determines whether an object \n    represented by a list 'q' has what it takes to soar through the air!\n\n    Two factors determine flight-worthiness:\n\n     Balance:  The object must be perfectly balanced, just like a well-designed plane. \n               We check if it's a palindrome \u2013 the same forward and backward!\n\n     Weight:   Even with perfect balance, a heavy object will stay grounded. \n               The total weight of its elements (sum of the list) must be \n               less than or equal to the maximum allowed weight 'w'.\n\n    If the object passes both tests, it's cleared for takeoff!  Return True!\n    Otherwise, it's back to the drawing board \u2013 return False!\n    \"\"\"\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n```\n\n\n\n\n\n\n\n\n\n", "```python\ndef smallest_change(arr):\n    \"\"\"\n    Imagine you have a magical mirror that can only reflect lists of numbers \n    perfectly if they are palindromes (the same forward and backward). \u2728\n\n    This function is like a skilled artisan, examining a list of numbers \n    'arr' to see how many elements need adjustments to achieve that \n    perfect reflection.  Each adjustment is like a tiny chisel mark, \n    and the artisan strives to use as few as possible!\n\n    How many chisel marks will it take to reveal the palindrome within? \n\n    Example:\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1  # Just one change needed!\n    \"\"\"\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n```\n\n\n\n\n\n", "```python\ndef total_match(lst1, lst2):\n    \"\"\"\n    Given two lists of strings, this function definitively determines which \n    list possesses a smaller total character count across all its constituent strings. \n\n    The function meticulously calculates the cumulative character count for each list. \n    If the first list exhibits a character count less than or equal to that of the \n    second list, it is designated as the definitive result and returned accordingly.\n\n    Conversely, if the second list demonstrates a smaller total character count, \n    it is identified as the correct solution and returned as the output.\n\n    Examples:\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n```\n\n\n\n\n\n\n\n", "```python\ndef is_multiply_prime(a):\n    \"\"\"\n    This function checks if a given number less than 100 is the product \n    of exactly three prime numbers.\n\n    Example:\n    is_multiply_prime(30) == True  # 30 = 2 * 3 * 5\n    \"\"\"\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n```\n\n\n\n\n", "```python\ndef is_simple_power(x, n):\n    \"\"\"\n    Esteemed colleagues, I present to you a function of elegant design \u2013 \n    a testament to the power of mathematical verification. \n\n    Its purpose is to ascertain, with utmost certainty, whether a given number 'x' \n    stands as a simple power of another number 'n.' \n\n    In mathematical parlance, 'x' is deemed a simple power of 'n' if and only if \n    there exists an integer exponent such that 'n' raised to that exponent yields 'x.'\n\n    Allow me to elucidate its workings through a series of illustrative examples:\n\n    - When confronted with the input (1, 4), the function, after careful deliberation, shall declare True.\n    - Similarly, for the input (2, 2), it shall pronounce True once more.\n    - Yet, when presented with the input (3, 2), it shall, with equal confidence, proclaim False.\n\n    Thus, through a process of logical deduction and numerical evaluation, \n    this function serves as an arbiter of truth in the realm of simple powers.\n    \"\"\"\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n```\n\n\n\n\n\n", "```python\ndef iscube(a):\n    \"\"\"\n    This function determines whether a given integer is a perfect cube, \n    meaning it is the result of cubing an integer.\n\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n```\n\n\n\n", "```python\ndef hex_key(num):\n    \"\"\"\n    This function analyzes a given hexadecimal number string to determine \n    and return the count of hexadecimal digits that are prime numbers.\n\n    Prime Numbers:  In mathematics, a prime number is a natural number \n                    greater than 1 that is not a product of two smaller \n                    natural numbers.  For example, 2, 3, 5, 7 are prime \n                    numbers, but 4, 6, 8, 9 are not.\n\n    Hexadecimal Digits:  The hexadecimal system uses 16 distinct symbols \n                          to represent numerical values. These symbols are \n                          0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, and F.\n\n    The function iterates through each hexadecimal digit within the input \n    string. If a digit's decimal equivalent is a prime number (2, 3, 5, 7, 11, or 13), \n    it is counted towards the total. The final count of prime hexadecimal digits \n    is then returned.\n\n    Note: This function operates under the assumption that the input string \n    represents a valid hexadecimal number.\n\n    Examples:\n    hex_key(\"AB\") == 1  # 'B' (decimal 11) is prime.\n    hex_key(\"1077E\") == 2  # '7' and '7' are prime.\n    hex_key(\"ABED1A33\") == 4  # 'B', 'D', '3', and '3' are prime.\n    \"\"\"\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n```\n\n\n\n\n\n\n", "```python\ndef decimal_to_binary(decimal):\n    \"\"\"\n    Once upon a time, in the world of computers, numbers had a secret \n    language called binary.  They used only 0s and 1s, like a secret code! \ud83e\udd2b\n\n    This function is a translator between our language and theirs.  You give \n    it a decimal number (the kind we use every day), and it whispers the \n    binary equivalent back to you, carefully placing \"db\" at the beginning \n    and end of the message, like a magical incantation. \ud83e\ude84\n\n    Example:\n    decimal_to_binary(15)   # returns \"db1111db\" \u2013 the secret code for 15!\n    \"\"\"\n    return \"db\" + bin(decimal)[2:] + \"db\"\n```\n\n\n\n\n\n", "```python\ndef is_happy(s):\n    \"\"\"\n    This function determines if a string is \"happy\" based on a specific rule: \n\n    A \"happy\" string must have at least three characters, and every set of \n    three consecutive characters within the string must be unique \u2013 no repeats allowed!\n\n    Examples:\n    is_happy(\"a\") => False (Too short!)\n    is_happy(\"aa\") => False (Too short, and repeated characters)\n    is_happy(\"abcd\") => True (Long enough, all characters unique)\n    is_happy(\"aabb\") => False (Repeated characters)\n    is_happy(\"adb\") => True (Long enough, all characters unique)\n    is_happy(\"xyy\") => False (Repeated characters)\n    \"\"\"\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n```\n\n\n\n\n\n\n", "```python\ndef numerical_letter_grade(grades):\n    \"\"\"\n    It's the final countdown!  The semester is coming to a close, and the teacher \n    is scrambling to finalize those all-important grades.  But disaster has struck! \ud83d\ude31\n\n    Her secret grading algorithm \u2013 a masterpiece of code that transformed GPAs into \n    letter grades \u2013 has vanished!  Lost to the digital abyss!\n\n    Fear not! This function steps in as the hero, replicating the lost algorithm.  \n    It takes a list of student GPAs and meticulously converts them to letter grades, \n    ensuring that every student receives their rightful evaluation. \n\n    It's like a digital phoenix, rising from the ashes of the lost code to save \n    the day! \ud83d\udd25\n\n    Example:\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n```\n\n\n\n\n\n\n", "```python\ndef prime_length(string):\n    \"\"\"\n    This function checks if the length of a given string is a prime number.\n\n    A prime number is a whole number greater than 1 that has only two divisors: \n    1 and itself.\n\n    Examples:\n    prime_length('Hello') == True  # Length is 5, a prime number\n    prime_length('orange') == False  # Length is 6, not a prime number\n    \"\"\"\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n```\n\n\n\n", "```python\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer 'n', this function calculates the number \n    of 'n'-digit positive integers that either begin or end with the digit 1.\n\n    For example, if n = 2, the function would count the numbers 10, 11, 12, ..., 19, \n    as well as 21, 31, 41, ..., 91, resulting in a total count of 18.\n\n    The function employs a concise formula to achieve this calculation.\n    \"\"\"\n    if n == 1: \n        return 1\n    return 18 * (10 ** (n - 2))\n```\n\n\n\n\n\n", "```python\ndef solve(N):\n    \"\"\"\n    Given a positive integer N, this function calculates the sum of its digits \n    and returns the binary representation of that sum as a string.\n\n    Examples:\n        solve(1000) == \"1\" \n        solve(150) == \"110\"\n        solve(147) == \"1100\"\n    \"\"\"\n    return bin(sum(int(i) for i in str(N)))[2:]\n```\n\n\n\n", "```python\ndef add(lst):\n    \"\"\"\n    Presented with a non-empty tapestry of integers, this function embarks on \n    a selective summation. It gracefully traverses the list, pausing only at those \n    elements that reside at odd-numbered indices and possess the distinguished \n    quality of evenness.\n\n    These chosen few, united by their shared properties, contribute their values \n    to a grand sum, which the function, with an air of mathematical elegance, \n    returns as its final decree.\n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n```\n\n\n\n\n\n", "```python\ndef anti_shuffle(s):\n    \"\"\"\n    Imagine taking each word in a sentence, shaking it up like a snow globe, \n    and letting the letters settle in alphabetical order.  That's what this \n    function does \u2013 it \"anti-shuffles\" a string! \u2744\ufe0f\n\n    It keeps the words in their original order and even preserves the spaces \n    between them, but within each word, the letters get rearranged into a \n    neat alphabetical line. \n\n    Examples:\n    anti_shuffle('hello') returns 'ehllo'  # The letters in \"hello\" are rearranged\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor' # Punctuation stays in place!\n    \"\"\"\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n```\n\n\n\n\n\n\n\n", "```python\ndef get_row(lst, x):\n    \"\"\"\n    Imagine a grid of numbers, kind of like a spreadsheet, but each row can \n    have a different number of columns. This function helps you find all \n    the coordinates where a specific number 'x' appears in this grid.\n\n    It returns a list of tuples, where each tuple represents a coordinate \n    (row, column) of 'x'.  The coordinates are sorted first by row (ascending) \n    and then by column within each row (descending). \n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)] \n\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)] #  '3' only appears once, in row 2, column 2\n    \"\"\"\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n```\n\n\n\n\n\n\n\n\n", "```python\ndef sort_array(array):\n    \"\"\"\n    This function takes a list of non-negative integers and returns a new \n    list containing the same elements, but sorted based on a specific rule:\n\n    - If the sum of the first and last elements in the input list is even, \n      the new list is sorted in descending order.\n    - If the sum is odd, the new list is sorted in ascending order.\n\n    The original input list is not modified.\n\n    Examples:\n    - sort_array([]) => []\n    - sort_array([5]) => [5]\n    - sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]  (2 + 5 is odd)\n    - sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0] (2 + 6 is even)\n    \"\"\"\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n```\n\n\n\n\n\n\n\n", "```python\ndef encrypt(s):\n    \"\"\"\n    In a realm of secrets and shadows, a message awaits encryption.  \n    This function, a guardian of confidentiality, steps forward.\n\n    Taking a string as its charge, it wields a formidable cipher \u2013 \n    the alphabet itself, twisted and rotated. Each letter is plunged \n    into a vortex of transformation, shifted four places down its \n    order, as if dancing to a hidden rhythm.\n\n    The result? A string veiled in mystery, its meaning obscured \n    from prying eyes. Only those possessing the knowledge of the \n    cipher can unravel its secrets.\n\n    Examples:\n    encrypt('hi') returns 'lm'  \u2013  The whispers of 'hi' become the enigma of 'lm'.\n    encrypt('asdfghjkl') returns 'ewhjklnop' \u2013 A longer message, veiled in deeper secrecy.\n    \"\"\"\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n```\n\n\n\n\n\n\n\n", "```python\ndef next_smallest(lst):\n    \"\"\"\n    This function identifies and returns the second smallest unique element \n    within a given list of integers.\n\n    The function first eliminates duplicate elements from the input list \n    by converting it into a set. It then sorts the unique elements in \n    ascending order.  If the resulting list contains fewer than two unique \n    elements, signifying that a second smallest element doesn't exist, \n    the function returns None. Otherwise, it returns the element at \n    index 1, which corresponds to the second smallest element.\n\n    Examples:\n    next_smallest([1, 2, 3, 4, 5]) == 2  # The unique elements are [1, 2, ...], and 2 is the second smallest.\n    next_smallest([5, 1, 4, 3, 2]) == 2  # The order of elements in the input doesn't affect the outcome.\n    next_smallest([]) == None # An empty list has no second smallest element.\n    next_smallest([1, 1]) == None # A list with only one unique element has no second smallest element.\n    \"\"\"\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n```\n\n\n\n\n\n", "```python\ndef is_bored(S):\n    \"\"\"\n    This function takes a string of words representing sentences (delimited by '.', '?', or '!') \n    and counts the number of sentences that start with the word \"I\".  We'll call these \"boredoms\" \n    because they might indicate someone talking about themselves too much! \ud83d\ude09\n\n    Examples:\n    >>> is_bored(\"Hello world\")  # No sentences here, so no boredoms!\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")  # One \"I\" sentence\n    1\n    \"\"\"\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n```\n\n\n\n\n\n\n\n", "```python\ndef any_int(x, y, z):\n    \"\"\"\n    This function unveils the hidden relationships between three numbers, \n    like a mathematical detective seeking a numerical balance. \ud83d\udd75\ufe0f\u200d\u2640\ufe0f\n\n    The challenge? To determine if within this trio of numbers, one holds \n    the power to unite the other two through addition.\n\n    But there's a catch!  All three numbers must be integers \u2013 whole numbers \n    without any decimal baggage. \n\n    If this harmonious balance is found, the function confidently declares True. \n    Otherwise, it regretfully reveals False, signifying that the numerical \n    harmony remains elusive. \n    \"\"\"\n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n```\n\n\n\n\n\n\n\n\n\n", "```python\ndef encode(message):\n    \"\"\"\n    Imagine a secret code where letters whisper their messages in a disguised \n    form!  This function is the key to that code \u2013 a linguistic transformer \n    that takes a message and makes it unrecognizable. \ud83e\udd2b\n\n    It performs two clever tricks:\n\n    - Case Swap: Every letter flips its case \u2013 lowercase becomes UPPERCASE \n      and vice versa, like a mirror image of the original.\n    - Vowel Shift: Each vowel takes a secret leap forward in the alphabet, \n      replaced by the letter two steps ahead.  It's a vowel adventure! \n\n    Example:\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG' \u2013 See how the vowels took a leap?\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n```\n\n\n\n\n\n\n\n\n", "```python\ndef largest_prime_digit_sum(lst):\n    \"\"\"\n    This function takes a list of integers, finds the largest prime number within \n    the list, and returns the sum of the digits of that prime number.\n\n    Examples:\n    largest_prime_digit_sum([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10\n    largest_prime_digit_sum([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25\n    \"\"\"\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n```\n\n", "```python\ndef check_dict_case(dict):\n    \"\"\"\n    Imagine a dictionary as a grand ballroom, where keys are the distinguished \n    guests and values are their elegant companions.  This function plays \n    the role of a strict etiquette enforcer, ensuring that all keys adhere \n    to a consistent case \u2013 either all lowercase or all uppercase. \n\n    If even a single key breaks the dress code, the function declares a faux pas \n    and returns False. Only if all keys maintain a uniform case (and there's \n    at least one guest present) will the function grant its approval with a \n    resounding True. \n\n    It's like a case-sensitive dance, where elegance and order prevail!\n    \"\"\"\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n```\n\n\n\n\n\n\n\n", "```python\ndef count_up_to(n):\n    \"\"\"\n    This function takes a non-negative integer 'n' and returns a list of \n    all prime numbers less than 'n'. \n\n    Examples:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n```\n\n\n\n\n\n\n\n", "```python\ndef multiply(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the product \n    of their units digits. The units digit is the digit in the ones place.\n\n    To get the units digit of a number, we use the modulo operator (%) with 10. \n    For example, 148 % 10 = 8, and 412 % 10 = 2.\n\n    The function also handles negative numbers by taking the absolute value \n    of the units digit before multiplying.\n\n    Examples:\n    multiply(148, 412) == 16  (8 * 2 = 16)\n    multiply(19, 28) == 72    (9 * 8 = 72)\n    multiply(2020, 1851) == 0   (0 * 1 = 0)\n    multiply(14, -15) == 20  (4 * 5 = 20)\n    \"\"\"\n    return abs(a % 10) * abs(b % 10)\n```\n\n\n\n\n\n\n\n", "```python\ndef count_upper(s):\n    \"\"\"\n    Within the intricate tapestry of a string, this function embarks on a quest \n    to enumerate those vowels that stand tall, adorned in uppercase attire, \n    and grace the even-numbered positions.\n\n    Like a discerning scholar, it traverses the string, carefully examining \n    each character at an even index. Should it encounter a vowel, resplendent \n    in its uppercase form, the count is incremented, a testament to its \n    distinguished presence. \n\n    Upon reaching the string's end, the function, with an air of quiet \n    satisfaction, reveals the final tally \u2013 a tribute to the prevalence \n    of these elegant characters.\n    \"\"\"\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n```\n\n\n\n\n\n\n\n\n\n", "```python\ndef closest_integer(value):\n    \"\"\"\n    This function takes a string representation of a number and returns the \n    closest integer to that number. It follows specific rounding rules:\n\n    - Regular Rounding:  For most cases, the function rounds the number \n      to the nearest integer using standard rounding rules (e.g., \"15.3\" \n      becomes 15).\n\n    - Rounding Away from Zero: When the input number is exactly halfway \n      between two integers (ends with \".5\"), the function rounds it away \n      from zero. This means:\n          - Positive numbers with \".5\" are rounded up (e.g., \"14.5\" becomes 15).\n          - Negative numbers with \".5\" are rounded down (e.g., \"-14.5\" becomes -15).\n\n    - Trailing Zeros: The function handles trailing zeros after the decimal \n      point by removing them before rounding (e.g., \"15.00\" is treated as \"15\").\n\n    Examples:\n    closest_integer(\"10\") == 10\n    closest_integer(\"15.3\") == 15\n    closest_integer(\"14.5\") == 15\n    closest_integer(\"-14.5\") == -15\n    \"\"\"\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n```\n\n\n\n\n\n\n\n\n\n", "```python\ndef make_a_pile(n):\n    \"\"\"\n    This function simulates building a pile of stones with 'n' levels. \n    Each level has a specific number of stones, determined by these rules:\n\n    - Level 1:  'n' stones.\n    - Subsequent Levels: \n        - If 'n' is odd, each level has the next consecutive odd number of stones.\n        - If 'n' is even, each level has the next consecutive even number of stones.\n\n    The function returns a list where each element represents the number of stones \n    in a corresponding level.\n\n    Example:\n    >>> make_a_pile(3)  #  [3 stones, 5 stones, 7 stones]\n    [3, 5, 7]\n    \"\"\"\n    return [n + 2*i for i in range(n)]\n```\n\n\n\n\n\n\n", "This function takes a string of words separated by commas or spaces and returns a list of individual words. Here's how it works:\n\n* **Handle empty strings:** If the input string is empty, return an empty list.\n* **Replace commas with spaces:** Iterate through the string and replace all commas with spaces.\n* **Join the characters:** Concatenate the characters (now with spaces instead of commas) back into a single string.\n* **Split into words:** Split the string at the spaces to create a list of individual words.\n* **Return the word list:** Return the resulting list of words. \n", "```python\ndef choose_num(x, y):\n    \"\"\"\n    Given two positive integers 'x' and 'y', this function determines \n    the largest even integer within the inclusive range [x, y]. If no \n    such even integer exists within this range, the function returns -1.\n\n    Examples:\n    choose_num(12, 15) == 14 \n    choose_num(13, 12) == -1  (No even number in the range)\n    \"\"\"\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n```\n\n\n\n\n\n", "```python\ndef rounded_avg(n, m):\n    \"\"\"\n    This function calculates the average of all integers within the \n    inclusive range [n, m], where 'n' and 'm' are positive integers. \n\n    If 'n' is greater than 'm,' indicating an invalid range, the \n    function returns -1.\n\n    For valid ranges, the function computes the average, rounds it to \n    the nearest integer, and then converts the rounded average into its \n    binary representation, which is returned as a string.\n\n    Examples:\n    rounded_avg(1, 5) => \"0b11\"  (Average of 1, 2, 3, 4, 5 is 3, which in binary is 11)\n    rounded_avg(7, 5) => -1      (Invalid range)\n    \"\"\"\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n```\n\n\n\n\n\n\n\n\n\n", "```python\ndef unique_digits(x):\n    \"\"\"\n    Imagine you're given a list of numbers, and you want to find only the \n    special ones that are made up entirely of odd digits (like 1, 3, 5, 7, and 9). \n\n    This function does exactly that!  It goes through each number in the list and \n    checks if all its digits are odd.  If a number passes the test, it gets added \n    to a new list. Finally, this new list is sorted in ascending order.\n\n    Example:\n    >>> unique_digits([15, 33, 1422, 1])  # 1422 has even digits, so it's excluded\n    [1, 15, 33]\n    \"\"\"\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n```\n\n\n\n\n\n", "```python\ndef by_length(arr):\n    \"\"\"\n    Get ready for a number rollercoaster! \ud83c\udfa2  This function takes a list of integers, \n    picks out the ones between 1 and 9, sorts them, flips them backward, and then \n    transforms them into their wordy counterparts!\n\n    It's like a number-to-word magic show! \u2728\n\n    - First, we filter out any strange numbers outside the 1-9 range.\n    - Then, we sort the remaining numbers in descending order, like they're \n      climbing down a staircase.\n    - Finally, we swap each number for its name \u2013 1 becomes \"One,\" 2 becomes \"Two,\" \n      and so on, like giving each number a stylish new outfit. \n\n    Example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    returns [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]  \n    \u2013  The numbers are sorted, reversed, and transformed into words! \n    \"\"\"\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n```\n\n\n\n\n\n\n\n\n\n\n\n", "```python\ndef f(n):\n    \"\"\"\n    This function creates a list of 'n' elements, where each element's \n    value depends on its position (index) in the list:\n\n    - Even Indices: The element's value is the factorial of its index. \n                    (Factorial means multiplying all numbers from 1 to that index.)\n    - Odd Indices:  The element's value is the sum of all numbers from 1 to its index.\n\n    Example:\n    f(5) == [1, 2, 6, 24, 15] \n\n    Explanation:\n     - Index 1 (Odd):  1  (Sum of numbers from 1 to 1)\n     - Index 2 (Even): 2! = 2 * 1 = 2\n     - Index 3 (Odd):  1 + 2 + 3 = 6 \n     - Index 4 (Even): 4! = 4 * 3 * 2 * 1 = 24\n     - Index 5 (Odd):  1 + 2 + 3 + 4 + 5 = 15\n    \"\"\"\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n```\n\n\n\n\n\n", "```python\ndef even_odd_palindrome(n):\n    \"\"\"\n    This function takes a positive integer 'n' and determines the count \n    of even and odd palindromic integers within the inclusive range from 1 to 'n'.\n\n    Palindrome: A palindrome is a sequence that reads the same backward as forward.\n                For example, 121, 353, and 9009 are palindromes.\n\n    The function iterates through each number in the range [1, n].  For each number, \n    it checks two conditions:\n\n    1. Palindrome Check: It verifies if the number is a palindrome. This is done \n       by converting the number to a string and comparing it with its reversed version.\n\n    2. Even/Odd Check: It determines whether the number is even or odd using the \n       modulo operator (%). If the remainder when divided by 2 is 0, the number \n       is even; otherwise, it's odd.\n\n    Based on these checks, the function increments the respective counters for even \n    and odd palindromes. Finally, it returns a tuple containing these two counts.\n\n    Example:\n    even_odd_palindrome(12) == (4, 6) \n    This means there are 4 even palindromes and 6 odd palindromes between 1 and 12.\n    \"\"\"\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n```\n\n\n\n\n\n\n\n", "```python\ndef count_nums(arr):\n    \"\"\"\n    This function takes a list of integers and counts how many of those integers \n    have a digit sum greater than zero.\n\n    Here's the twist: When calculating the digit sum for a negative number, \n    the leftmost digit keeps its negative sign.  For example, the digit sum of -123 \n    would be -1 + 2 + 3 = 4.\n\n    Examples:\n    >>> count_nums([]) == 0  # An empty list has no numbers with digit sums.\n    >>> count_nums([-1, 11, -11]) == 1  # Only 11 has a digit sum greater than 0.\n    >>> count_nums([1, 1, 2]) == 3  # All numbers have digit sums greater than 0.\n    \"\"\"\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n```\n\n\n\n\n\n\n\n\n\n", "```python\ndef move_one_ball(arr):\n    \"\"\"\n    Okay, imagine you have a line of numbered balls, but they're all jumbled up! \u26bd\ufe0f\n\n    You can only do one thing: shift all the balls one position to the right, \n    with the last ball wrapping around to the beginning. You can do this as \n    many times as you want.\n\n    The goal?  To get the balls in order from smallest to largest! \n\n    This function figures out if you can achieve that perfectly ordered line \n    using only those right shifts.\n\n    It's like a ball-sorting puzzle!  Can you solve it? \ud83e\udd14\n    \"\"\"\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n```\n\n\n\n\n\n\n\n\n\n", "```python\ndef exchange(lst1, lst2):\n    \"\"\"\n    This function takes two lists of numbers and determines if it's possible \n    to swap elements between them to make the first list (lst1) contain only \n    even numbers.\n\n    Here's how it works:\n\n    1. Count Odds in lst1: It counts how many odd numbers are in lst1.\n    2. Count Evens in lst2: It counts how many even numbers are in lst2.\n    3. Compare Counts:  If there are at least as many even numbers in lst2 \n       as there are odd numbers in lst1, it's possible to swap them to make \n       lst1 all even. In this case, it returns \"YES.\"\n    4. Otherwise: If there aren't enough even numbers in lst2 to swap for \n       the odd numbers in lst1, it returns \"NO.\"\n\n    Examples:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" (Enough evens in lst2)\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"  (Not enough evens in lst2)\n    \"\"\"\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n```\n\n\n\n\n\n\n\n", "```python\ndef histogram(text):\n    \"\"\"\n    Given a string containing space-separated lowercase letters, this function \n    identifies the letter(s) with the highest frequency of occurrence and returns \n    a dictionary containing those letters as keys and their respective counts \n    as values.\n\n    Examples:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    letter_counts = {}\n    letters = text.split(\" \")\n    max_count = 0\n\n    for letter in letters:\n        if letter != '':\n            if letter in letter_counts:\n                letter_counts[letter] += 1\n            else:\n                letter_counts[letter] = 1\n            max_count = max(max_count, letter_counts[letter])\n\n    result = {}\n    for letter, count in letter_counts.items():\n        if count == max_count:\n            result[letter] = count\n\n    return result\n```\n\n\n\n\n\n\n\n", "```python\ndef reverse_delete(s, c):\n    \"\"\"\n    Get ready for some string surgery! \u2702\ufe0f \n\n    We've got two strings, 's' and 'c'.  Our mission: to remove all the \n    characters from 's' that appear in 'c'. It's like a letter-ectomy!\n\n    Then comes the big question: Is the remaining string a palindrome? \n    That means it reads the same backward as forward \u2013 like \"racecar\"!\n\n    This function performs the surgery and delivers the results: a tuple \n    containing the modified string and a True/False verdict on its \n    palindromic status.\n\n    It's a palindrome detective with a surgical twist! \ud83d\udd75\ufe0f\u200d\u2640\ufe0f\n    \"\"\"\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n```\n\n\n\n\n\n\n\n", "```python\ndef odd_count(lst):\n    \"\"\"\n    Once upon a time, in the land of lists and strings, a challenge arose. \n    Each string, made up entirely of digits, held a secret \u2013 the number of \n    odd digits it contained.\n\n    This function is a master storyteller, weaving a tale for each string \n    in the list.  It counts the odd digits and then cleverly reveals the \n    secret within a sentence, replacing certain numbers with the count itself.\n\n    It's like a numerical fairy tale, where numbers whisper their secrets \n    through carefully crafted words! \ud83e\ude84\n    \"\"\"\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n```\n\n\n\n\n\n\n\n", "```python\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers, this function finds and returns the minimum \n    sum that can be achieved by adding up the elements of any non-empty \n    sub-array within the input array.\n\n    Examples:\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1  (The sub-array [1] has the minimum sum)\n    minSubArraySum([-1, -2, -3]) == -6  (The entire array has the minimum sum)\n    \"\"\"\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n```\n\n\n\n\n\n\n\n", "```python\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    Envision a landscape adorned with a grid of wells, each row representing \n    a wellspring of potential. Within each well, units of water, symbolized by \n    the numeral 1, await extraction.\n\n    Armed with buckets of uniform capacity, we embark on a task of hydraulic \n    management.  Our objective: to draw forth the water, leaving the wells depleted.\n\n    This function, a meticulous accountant of our endeavors, tallies the \n    number of times our buckets must descend into the depths to achieve this \n    aqueous equilibrium.\n\n    Like a symphony of extraction, the buckets rhythmically plunge and rise, \n    each descent marked by the function's unwavering count. The final tally, \n    a testament to our diligence, reflects the harmonious balance we have \n    wrought upon the watery expanse. \n    \"\"\"\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n```\n\n\n\n\n\n\n\n\n\n\n\n", "```python\ndef sort_array(arr):\n    \"\"\"\n    This function sorts an array of integers based on two criteria:\n\n    1. Primary Criterion: Ascending order of the number of '1' bits in their binary representation.\n    2. Secondary Criterion: For integers with the same number of '1' bits, ascending order \n       of their decimal value.\n\n    Examples:\n    sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] \n    sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4] \n    \"\"\"\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n```\n\n\n\n\n\n", "```python\ndef select_words(s, n):\n    \"\"\"\n    Imagine a master wordsmith, tasked with sifting through a sentence, \n    seeking only those words with a precise consonantal weight \u2013 'n' consonants, \n    no more, no less. \n\n    This function embodies that wordsmith, carefully examining each word, \n    counting its consonants like weighing precious gems.  Only words that meet \n    the exacting standard of 'n' consonants are deemed worthy and added to \n    a growing collection.\n\n    The final result, a curated list of words, reflects the wordsmith's \n    discerning taste, a testament to the power of precise selection.\n    \"\"\"\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n```\n\n\n\n\n\n\n\n\n\n\n\n", "```python\ndef get_closest_vowel(word):\n    \"\"\"\n    Imagine a word as a landscape, with consonants as towering mountains \n    and vowels as sparkling lakes nestled between them. \ud83c\udfd4\ufe0f\ud83c\udfde\ufe0f\n\n    This function sets out on an expedition from the right edge of this \n    landscape, searching for the first vowel that lies comfortably \n    between two consonant peaks. \n\n    If it finds such a vowel, it proudly returns it as a trophy of its \n    successful quest.  But if the journey yields no such discovery, \n    it returns an empty string, a symbol of its unfulfilled exploration.\n    \"\"\"\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n```\n\n\n\n\n\n\n\n", "```python\ndef match_parens(lst):\n    \"\"\"\n    This function takes a list containing two strings, where each string \n    consists solely of opening '(' and closing ')' parentheses. \n\n    The goal is to determine if these two strings can be concatenated \n    in any order to form a \"good\" string.\n\n    A \"Good\" String: A string is considered \"good\" if its parentheses \n                    are balanced. This means that for every opening parenthesis,\n                    there's a matching closing parenthesis in the correct order.\n\n    The function checks both possible concatenations (string1 + string2 and \n    string2 + string1). If either concatenation results in a \"good\" string \n    (balanced parentheses), it returns \"Yes.\" Otherwise, it returns \"No.\"\n\n    Example:\n    match_parens(['()(', ')']) == 'Yes' \n    Explanation: Concatenating as ')()(' forms a good string.\n    \"\"\"\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n```\n\n\n\n\n\n\n\n\n\n\n\n", "```python\ndef maximum(arr, k):\n    \"\"\"\n    Imagine a treasure chest filled with a jumbled assortment of numbers, \n    both positive and negative.  Your task is to find the 'k' most valuable \n    treasures within this chest \u2013 the 'k' largest numbers. \ud83d\udc8e\n\n    This function is like a skilled treasure hunter, meticulously sifting \n    through the numbers, arranging them in ascending order, and then \n    carefully selecting the 'k' most precious gems from the top.\n\n    The result is a sorted list of length 'k', showcasing the most \n    valuable treasures found within the numerical hoard.\n    \"\"\"\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n```\n\n\n\n\n\n\n\n\n\n\n\n", "```python\ndef solution(lst):\n    \"\"\"\n    This function takes a list of integers and calculates the sum of all \n    odd-valued elements that are located at even-numbered positions within \n    the list (remember that list indices start at 0, so the first element \n    is at an even position).\n\n    Examples:\n    solution([5, 8, 7, 1]) == 12  (5 at index 0 + 7 at index 2 = 12)\n    solution([3, 3, 3, 3, 3]) == 9   (3 at index 0 + 3 at index 2 + 3 at index 4 = 9)\n    solution([30, 13, 24, 321]) == 0  (No odd numbers at even positions)\n    \"\"\"\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n```\n\n\n\n\n\n\n\n", "```python\ndef add_elements(arr, k):\n    \"\"\"\n    Imagine a bustling marketplace filled with numbers, each vying for attention. \n    But amidst this numerical throng, we seek only those that are modest and \n    unassuming \u2013 the numbers with at most two digits.\n\n    This function, a discerning shopper, enters the marketplace with a specific \n    goal: to gather the first 'k' of these humble numbers and calculate their sum.\n\n    Like a careful accountant, it tallies their values, revealing the combined \n    worth of these unpretentious numerical gems. The result, a testament to the \n    beauty of simplicity, reflects the power of focusing on the essentials.\n    \"\"\"\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n```\n\n\n\n\n\n\n\n", "```python\ndef get_odd_collatz(n):\n    \"\"\"\n    This function generates the Collatz sequence for a given positive integer 'n' \n    and returns a sorted list containing only the odd numbers encountered in the sequence.\n\n    Collatz Conjecture: The Collatz conjecture proposes that for any positive integer, \n                        repeatedly applying the following rules will eventually lead to 1:\n                         - If the number is even, divide it by 2.\n                         - If the number is odd, multiply it by 3 and add 1.\n\n    The function starts with 'n' and applies the Collatz rules iteratively. It \n    collects only the odd numbers encountered during this process. Finally, it \n    sorts the collected odd numbers in ascending order and returns them as a list.\n\n    Example:\n    get_odd_collatz(5) returns [1, 5] \n    Explanation: The Collatz sequence for 5 is [5, 16, 8, 4, 2, 1]. The odd numbers \n                 in this sequence are 1 and 5.\n    \"\"\"\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n```\n\n\n\n\n\n\n\n\n", "```python\ndef valid_date(date):\n    \"\"\"\n    The concept of time, marked by the passage of days, months, and years, \n    is a fundamental aspect of human experience.  This function delves \n    into the intricacies of representing dates, carefully examining a given \n    date string to determine its validity.\n\n    Like a meticulous historian, it considers the rules that govern the \n    structure of dates, pondering the limits of days within each month \n    and the boundaries of months within a year.\n\n    It approaches the input string with caution, attempting to parse \n    its components and ensuring that they conform to the established \n    chronological order.\n\n    Only if the string successfully navigates these temporal constraints \n    does the function deem it a valid representation of a date, \n    returning True as a mark of its temporal integrity.\n    \"\"\"\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n```\n\n\n\n\n\n\n\n\n\n", "```python\ndef split_words(txt):\n    \"\"\"\n    This function is a master of wordplay, adept at breaking down strings \n    into individual words! \n\n    - If the string has spaces, it splits the string at those spaces.\n    - If there are no spaces but commas are present, it cleverly replaces \n      the commas with spaces and then performs the split.\n    - And if there are neither spaces nor commas, it takes a playful turn, \n      counting the lowercase letters in the string whose position in the \n      alphabet (a=0, b=1, etc.) is even!\n\n    It's like a linguistic puzzle solver, always finding a way to \n    dissect and understand the structure of words!\n    \"\"\"\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n```\n\n\n\n\n\n\n\n\n\n", "```python\ndef is_sorted(lst):\n    \"\"\"\n    This function determines if a given list of non-negative integers \n    is sorted in ascending order, with the additional constraint that \n    no number can appear more than twice in the list.\n\n    Here's a breakdown of the process:\n\n    1. Duplicate Check: It first creates a dictionary to count the occurrences \n       of each number in the list. If any number appears more than twice, the \n       function immediately returns False, as the list cannot be considered sorted\n       with excessive duplicates.\n\n    2. Ascending Order Check: If the duplicate check passes, the function then \n       iterates through the list, comparing each element with its preceding element. \n       If any element is smaller than the one before it, indicating a violation \n       of ascending order, the function returns False.\n\n    3. Sorted Confirmation: If both the duplicate check and the ascending order \n       check pass, the function confidently concludes that the list is indeed \n       sorted in ascending order with no more than two occurrences of any number, \n       returning True.\n\n    Examples:\n    is_sorted([1, 2, 3, 4, 5]) \u279e True  (Sorted in ascending order, no duplicates)\n    is_sorted([1, 3, 2, 4, 5]) \u279e False  (Not in ascending order)\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False  (The number 2 appears more than twice)\n    \"\"\"\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n```\n\n\n\n\n\n", "```python\ndef intersection(interval1, interval2):\n    \"\"\"\n    This function takes two intervals, each represented as a pair of integers \n    (start, end), and checks if the length of their intersection is a prime number.\n\n    - Intervals: Each interval includes both its start and end values.\n    - Intersection: The intersection of two intervals is the range of values \n      common to both intervals.  For example, the intersection of (1, 3) and (2, 4) is (2, 3).\n    - Prime Number: A prime number is a whole number greater than 1 that is only \n      divisible by 1 and itself.\n\n    The function returns \"YES\" if the intersection length is prime, \"NO\" if it's \n    not prime or if the intervals don't intersect at all.\n\n    Examples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"  (Intersection length is 1, not prime)\n    intersection((-3, -1), (-5, 5)) ==> \"YES\" (Intersection length is 2, prime)\n    \"\"\"\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n```\n\n\n\n\n\n\n\n", "```python\ndef prod_signs(arr):\n    \"\"\"\n    This function takes an array of integers and calculates a result based on \n    the following steps:\n\n    1. Handle Empty Array: If the input array is empty, it returns None.\n\n    2. Product of Signs: It calculates the product of the signs of all numbers in the array:\n       - If there's a 0 in the array, the product is 0.\n       - Otherwise, the product is -1 if there are an odd number of negative numbers, \n         and 1 if there are an even number of negative numbers.\n\n    3. Sum of Magnitudes: It calculates the sum of the absolute values (magnitudes) of \n       all numbers in the array.\n\n    4. Final Result: It multiplies the product of signs by the sum of magnitudes and \n       returns the result.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9  (Product of signs is -1, sum of magnitudes is 9, result is -9)\n    \"\"\"\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n```\n\n\n\n\n\n\n\n", "```python\ndef minPath(grid, k):\n    \"\"\"\n    This function finds the lexicographically smallest path of length 'k' in a given grid.\n\n    - Grid: An N x N grid where each cell contains a unique integer from 1 to N*N.\n    - Path: A sequence of 'k' cells where each cell shares an edge with the previous cell.\n    - Lexicographically Smaller: A path is lexicographically smaller if its ordered list \n      of cell values is smaller. For example, [1, 2, 1] is smaller than [1, 2, 3].\n\n    The function returns an ordered list of values representing the smallest path.\n\n    Examples:\n    minPath([[1,2,3], [4,5,6], [7,8,9]], 3) == [1, 2, 1] \n    minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1] \n    \"\"\"\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n```\n\n\n\n\n\n\n\n\n\n", "```python\ndef tri(n):\n    \"\"\"\n    Move over, Fibonacci! There's a new sequence in town \u2013 the Tribonacci sequence! \n\n    While Fibonacci dances with two numbers at a time, Tribonacci loves a trio! \n    It follows a unique rhythm:\n\n    - tri(1) always starts the party with a 3.\n    - For even numbers, it takes a shortcut: tri(n) = 1 + (n / 2)\n    - But for odd numbers, it gets fancy: tri(n) = tri(n-1) + tri(n-2) + tri(n+1) \u2013 \n      a three-way dance! \n\n    This function, a master choreographer, generates a list of the first 'n+1' \n    Tribonacci numbers, letting you witness their intricate steps. \n\n    It's a numerical dance party you won't want to miss! \ud83c\udfb6\n    \"\"\"\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n```\n\n\n\n\n\n\n\n", "```python\ndef digits(n):\n    \"\"\"\n    Let's unlock the power of odd digits!  This function takes a positive \n    integer and embarks on a quest to multiply all its odd digits together, \n    creating a unique product that showcases their combined strength.\n\n    Even if there are no odd digits, don't be discouraged! It gracefully returns \n    0, acknowledging that even without odds, there's still a numerical presence.\n\n    Let those odd digits shine! \u2728\n    \"\"\"\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n```\n\n\n\n\n\n\n\n", "```python\ndef is_nested(string):\n    \"\"\"\n    This function checks if a string containing only square brackets \n    has at least one nested bracket.\n\n    Nested Bracket: A bracket is considered nested if it is enclosed \n                    within another pair of brackets. For example, in \"[[]]\", \n                    the inner \"[]\" is nested.\n\n    The function works by:\n\n    1. Finding Indices: It locates the positions (indices) of all opening \n       and closing brackets in the string.\n\n    2. Matching Brackets: It matches opening brackets with their corresponding \n       closing brackets, checking if an opening bracket appears before its \n       matching closing bracket. This helps identify nesting.\n\n    3. Counting Nested Pairs: It counts how many pairs of brackets are nested.\n\n    4. Returning True/False: If there are at least two nested pairs (indicating \n       at least one level of nesting), the function returns True. Otherwise, \n       it returns False.\n\n    Examples:\n    is_nested('[[]]') \u279e True  (The inner brackets are nested)\n    is_nested('[][]') \u279e False (The brackets are not nested)\n    \"\"\"\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n```\n\n\n\n\n\n\n\n", "```python\ndef sum_squares(lst):\n    \"\"\"\n    Given a list of numerical values, this function performs a precise \n    mathematical operation: it calculates the sum of the squares of \n    the elements, after meticulously rounding each element to the \n    nearest greater integer.\n\n    The process unfolds with deliberate precision:\n\n    1. Ceiling Rounding:  Each element in the list is individually \n       subjected to a ceiling rounding operation, ensuring that it \n       is elevated to the smallest integer greater than or equal to \n       its original value.\n\n    2. Squaring:  The rounded elements are then individually squared, \n       amplifying their magnitudes.\n\n    3. Summation:  Finally, the squares of the rounded elements are \n       summed together, culminating in a single numerical result.\n\n    This function, a testament to mathematical rigor, embodies \n    the principles of rounding, squaring, and summation.\n    \"\"\"\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n```\n\n\n\n\n\n\n\n\n", "```python\ndef check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Imagine words as stepping stones across a river of text.  This function \n    peers at the very last stone and asks: \n\n    \"Are you a lone letter, standing apart from any word?\" \n\n    It carefully examines the final character of the string. If it finds a \n    single letter, proudly standing alone, unattached to any word, it declares \n    True, acknowledging its independent spirit.  \n\n    But if the last character is part of a word, a space, or if the river \n    is empty (an empty string), the function returns False, recognizing the \n    absence of a solitary letter at the text's edge.\n    \"\"\"\n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n```\n\n\n\n\n\n\n\n", "```python\ndef can_arrange(arr):\n    \"\"\"\n    This function finds the largest index in an array where the element at that \n    index is smaller than the element before it. If all elements are in \n    non-decreasing order, it returns -1.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) == 3 (3 is smaller than 4)\n    can_arrange([1,2,3]) == -1  (All elements are in order)\n    \"\"\"\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n```\n\n\n\n\n\n\n\n", "```python\ndef largest_smallest_integers(lst):\n    \"\"\"\n    It is proposed that a function can be devised to effectively determine \n    both the largest negative integer and the smallest positive integer within \n    a given list.  Furthermore, it is asserted that in the absence of either \n    negative or positive integers, the function should unequivocally indicate \n    their nonexistence with a distinct value, None.\n\n    The presented code constitutes a robust argument in support of this proposition. \n    It employs a methodical approach:\n\n    1. Isolation:  The function first segregates negative and positive integers \n       into separate lists, effectively isolating the candidates for our desired \n       extremes.\n\n    2. Extreme Identification:  Within each segregated list, the function employs \n       the inherent capabilities of the 'max' and 'min' functions to pinpoint \n       the largest negative and smallest positive integers, respectively.\n\n    3. Handling Absence:  Crucially, the function incorporates a conditional \n       check to gracefully handle scenarios where either negative or positive \n       integers are absent.  In such cases, it adheres to the stipulated \n       convention, returning None to denote their nonexistence.\n\n    Therefore, through this clear and concise implementation, the initial \n    proposition is demonstrably proven, solidifying the feasibility of \n    achieving the stated objectives.\n    \"\"\"\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n```\n\n\n\n\n\n\n\n\n\n", "```python\ndef compare_one(a, b):\n    \"\"\"\n    In a realm where numbers can take many forms \u2013 integers, decimals, \n    even words \u2013 a challenge arises: to determine the greater of two values, \n    while respecting their original attire.\n\n    This function steps forward, a master of numerical discernment.  \n    It examines 'a' and 'b', peering through their disguises of commas \n    and periods, recognizing their true numerical essence.\n\n    Should one value clearly surpass the other in magnitude, the function \n    proudly proclaims the victor, returning it in its original form.  \n\n    But if the two values stand as equals, the function remains silent, \n    returning None, acknowledging their perfect balance.\n    \"\"\"\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n```\n\n\n\n\n\n\n\n\n\n\n", "```python\ndef is_equal_to_sum_even(n):\n    \"\"\"\n    This function definitively determines whether a given integer 'n' can \n    be expressed as the sum of precisely four positive even numbers.\n\n    Through rigorous mathematical analysis, it has been established \n    that an integer satisfies this condition if and only if it adheres \n    to the following criteria:\n\n    1. Evenness: The integer 'n' must be divisible by 2.\n    2. Magnitude: The integer 'n' must be greater than or equal to 8.\n\n    The function, based on these established principles, evaluates the \n    input integer against these criteria.  A result of True unequivocally \n    affirms that 'n' can indeed be represented as the sum of four \n    positive even numbers. Conversely, a result of False conclusively \n    indicates that such a representation is not possible. \n    \"\"\"\n    return n%2 == 0 and n >= 8\n```\n\n\n\n\n\n\n\n", "```python\ndef special_factorial(n):\n    \"\"\"\n    Factorials can be a bit tricky, but think of them like building a \n    tower of blocks!  Each block represents a number, and you multiply \n    them together to reach new heights. \ud83e\uddf1\n\n    This function calculates a special kind of factorial called the \n    \"Brazilian factorial.\" It's like building multiple towers, each a \n    bit smaller than the last, and then multiplying them all together! \n\n    Don't worry if it seems complicated \u2013 the code breaks it down \n    step by step, making it manageable. You got this! \ud83d\udcaa\n    \"\"\"\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n```\n\n\n\n\n\n\n\n\n\n\n\n", "```python\ndef fix_spaces(text):\n    \"\"\"\n    Esteemed colleagues, allow me to present a function of refined elegance \u2013 \n    a testament to the art of string manipulation.\n\n    Its purpose is to meticulously transform a given string, replacing its \n    spaces with underscores, while exhibiting a discerning sensitivity \n    to sequences of consecutive spaces exceeding a threshold of two.\n\n    The function, with utmost precision, traverses the string, meticulously \n    examining each character. Upon encountering a space, it embarks on \n    a measured assessment of the ensuing space sequence.\n\n    Should the sequence exceed the stipulated threshold, a decisive hyphen \n    is employed as a mark of distinction. Otherwise, each space is gracefully \n    replaced with an underscore, preserving the string's overall structure.\n\n    Thus, through a symphony of conditional evaluations and string \n    concatenations, this function achieves its objective with a blend \n    of precision and aesthetic refinement.\n    \"\"\"\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n```\n\n\n\n\n\n\n\n\n\n", "```python\ndef file_name_check(file_name):\n    \"\"\"\n    This function meticulously examines a string representing a file name, \n    assessing its validity against a set of established criteria.\n\n    Validity Criteria:\n    1. Digit Count: The file name must contain no more than three digits (0-9).\n    2. Dot Presence and Position: The file name must include exactly one dot (.), \n       separating the base name from the extension.\n    3. Base Name: The substring preceding the dot (the base name) must not be empty \n       and must begin with a letter from the Latin alphabet (a-z, A-Z).\n    4. Extension: The substring following the dot (the extension) must belong \n       to the following permissible set: ['txt', 'exe', 'dll'].\n\n    The function methodically evaluates each criterion, returning \"No\" at the first \n    instance of a violation. If all criteria are satisfied, it confidently \n    declares the file name valid by returning \"Yes.\"\n\n    Examples:\n    file_name_check(\"example.txt\")  # => 'Yes' (Meets all criteria)\n    file_name_check(\"1example.dll\") # => 'No'  (Base name doesn't start with a letter)\n    \"\"\"\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "```python\ndef sum_squares(lst):\n    \"\"\"\n    The interplay between numbers and their positions within a sequence \n    has long fascinated mathematicians. This function explores this relationship, \n    applying specific transformations to elements based on their placement \n    within a list.\n\n    It traverses the list, contemplating the index of each element. For those \n    elements residing at indices divisible by 3, it squares their values, \n    amplifying their presence. For elements occupying indices divisible by 4 \n    but not by 3, it cubes their values, further enhancing their significance.\n\n    The remaining elements, untouched by these transformations, stand as they \n    were, their original values preserved.  Finally, the function sums all \n    transformed and untransformed elements, offering a glimpse into the \n    cumulative effect of this positional interplay.\n    \"\"\"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n```\n\n\n\n\n\n\n\n\n\n", "```python\ndef words_in_sentence(sentence):\n    \"\"\"\n    Imagine playing a word game!  You get a sentence, and your challenge \n    is to pick out only the words whose length is a prime number. \n\n    A prime number is a whole number greater than 1 that can only be divided \n    evenly by 1 and itself. It's like a special, unique number!\n\n    This function is a master word detective, searching through the sentence \n    and collecting those special \"prime-length\" words. Then, it puts them back \n    together in a new sentence, keeping their original order.  \n\n    It's like finding hidden treasures in a sentence! \n    \"\"\"\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n```\n\n\n\n\n\n\n\n\n\n", "```python\ndef simplify(x, n):\n    \"\"\"\n    This function takes two fractions, represented as strings in the format \n    \"numerator/denominator\" (e.g., \"1/5\"), and determines if their product \n    results in a whole number.\n\n    Here's how it works:\n\n    1. Split Fractions:  It separates the numerators and denominators of both input \n       fractions.\n    2. Calculate Product: It multiplies the numerators together and the denominators \n       together to get the numerator and denominator of the resulting fraction.\n    3. Check for Whole Number: It divides the resulting numerator by the resulting \n       denominator. If the result is a whole number (meaning it has no fractional part), \n       the function returns True. Otherwise, it returns False.\n\n    Examples:\n    simplify(\"1/5\", \"5/1\") == True (1/5 * 5/1 = 1, a whole number)\n    simplify(\"1/6\", \"2/1\") == False (1/6 * 2/1 = 1/3, not a whole number)\n    \"\"\"\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n```\n\n\n\n\n\n\n\n\n\n\n\n", "```python\ndef order_by_points(nums):\n    \"\"\"\n    This function takes a list of integers and sorts them in ascending order \n    based on the sum of their digits.  If multiple numbers have the same digit sum, \n    they are kept in their original order.\n\n    Example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    Explanation:\n        - -1 and -11 both have a digit sum of -1, but -1 comes first in the original list.\n        - 1 and -12 both have a digit sum of 1, but 1 comes first in the original list.\n    \"\"\"\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n```\n\n\n\n\n\n\n\n", "```python\ndef specialFilter(nums):\n    \"\"\"\n    This function is like a picky bouncer at a number club, only letting \n    in the cool numbers that meet some very specific criteria! \ud83d\ude0e\n\n    The rules are strict:\n\n    1. Gotta Be Big: The number has to be greater than 10 \u2013 no small fries allowed!\n    2. Oddly Stylish:  Both the first and last digits must be odd. It's all \n       about making a statement!\n\n    The function counts how many numbers make it past the velvet rope and \n    into the exclusive club. It's a numerical party, and only the most \n    interesting numbers get invited! \ud83c\udf89\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n```\n\n\n\n\n\n\n\n\n\n\n", "```python\ndef get_max_triples(n):\n    \"\"\"\n    This function takes a positive integer 'n' and creates a special array \n    of 'n' numbers.  Each number in the array is calculated using a formula: \n    a[i] = i * i - i + 1 (where 'i' is the position of the number in the array).\n\n    Then, the function searches for groups of three numbers (triples) within \n    this array where:\n\n    1. The positions of the three numbers in the array follow a strict order: i < j < k\n    2. The sum of the three numbers is divisible by 3.\n\n    The function returns the total number of these special triples it finds.\n\n    Example:\n    get_max_triples(5) == 1\n    Explanation: \n    The array created for n=5 is [1, 3, 7, 13, 21].  \n    Only one triple meets the criteria: (1, 7, 13), because 1 + 7 + 13 = 21, which is divisible by 3.\n    \"\"\"\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n```\n\n\n\n\n\n\n\n\n\n", "```python\ndef bf(planet1, planet2):\n    \"\"\"\n    Esteemed colleagues, let us embark on a celestial journey through our \n    solar system, a realm governed by the immutable laws of planetary motion.\n\n    This function, a testament to astronomical precision, accepts two \n    planetary names as input: 'planet1' and 'planet2.' Its noble objective \n    is to identify and enumerate those celestial bodies whose orbits lie \n    between the designated planets, meticulously ordered by their proximity \n    to the Sun, the heart of our cosmic neighborhood.\n\n    Should the input deviate from the established canon of planetary \n    nomenclature, the function, with an air of scientific rigor, shall \n    return an empty tuple, signifying the absence of a valid planetary sequence.\n\n    Thus, through a symphony of string comparisons and index manipulations, \n    this function unveils the celestial tapestry that graces our solar system.\n    \"\"\"\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n```\n\n\n\n\n\n\n\n\n\n", "```python\ndef sorted_list_sum(lst):\n    \"\"\"\n    Imagine a librarian tasked with organizing a shelf of books, each \n    labeled with a word.  The librarian has a peculiar rule: only books \n    with words of even length are allowed on this special shelf. \n\n    This function embodies the librarian's meticulous approach. It first \n    arranges the books alphabetically, like a dutiful librarian would. \ud83d\udcda\n\n    Then, it carefully examines each book, removing those with words of \n    odd length \u2013 they don't belong on this shelf!  The remaining books, \n    those with even-length words, are then rearranged by the length of \n    their words, creating a visually pleasing order.\n\n    It's like a literary symphony, where words of even length are harmonized \n    on the shelf, a testament to the librarian's love of order and balance. \n    \"\"\"\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "```python\ndef x_or_y(n, x, y):\n    \"\"\"\n    This function returns the value of 'x' if the input integer 'n' is a \n    prime number, and returns the value of 'y' otherwise.\n\n    Examples:\n    x_or_y(7, 34, 12) == 34 (7 is prime)\n    x_or_y(15, 8, 5) == 5  (15 is not prime)\n    \"\"\"\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n```\n\n\n\n\n\n\n\n\n\n", "```python\ndef double_the_difference(lst):\n    \"\"\"\n    This function performs a precise and targeted calculation on a list of numbers, \n    adhering to a strict set of criteria. Its objective: to determine the sum of \n    squares for only those numbers that meet the following rigorous conditions:\n\n    1. Positivity: Only positive numbers are considered. Negative numbers are \n       categorically excluded from the calculation.\n    2. Integer Nature: Only whole numbers are eligible. Numbers with fractional \n       components are disregarded.\n    3. Oddness: The number must be odd. Even numbers are summarily dismissed.\n\n    The function, with unwavering precision, iterates through the list, applying \n    these criteria to each element. Only those numbers that satisfy all three \n    conditions are deemed worthy of inclusion in the final summation. \n\n    This meticulous process ensures that the result accurately reflects the sum \n    of squares of the select few numbers that meet the function's demanding standards.\n    \"\"\"\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n```\n\n\n\n\n\n\n\n\n\n\n\n", "```python\ndef compare(game, guess):\n    \"\"\"\n    Life is a journey of predictions and outcomes, where we constantly strive \n    to anticipate the future. This function captures the essence of that journey, \n    comparing our expectations with the reality that unfolds.\n\n    Imagine two parallel paths \u2013 one representing the actual results of a series \n    of events ('game'), and the other reflecting our guesses ('guess'). This \n    function measures the distance between these paths at each step, revealing \n    how close our predictions were to the truth.\n\n    For every perfect alignment, where guess matches reality, it marks a 0 \u2013 a \n    celebration of our foresight.  But for every divergence, it records the \n    absolute difference, a reminder that even in our miscalculations, there's \n    a lesson to be learned.\n\n    Embrace the journey of predictions, for in the comparison lies the path \n    to greater understanding and growth.\n    \"\"\"\n    return [abs(x-y) for x,y in zip(game,guess)]\n```\n\n\n\n\n\n\n\n", "```python\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"\n    This function determines the \"strongest\" extension from a list of extensions \n    for a given class name. \n\n    Extension Strength: The strength of an extension is calculated based on the \n                         difference between the number of uppercase letters (CAP) \n                         and lowercase letters (SM) in the extension's name:  CAP - SM.\n\n    Selection Process: The function iterates through the list of extensions, \n                       calculating the strength of each extension. It keeps track \n                       of the strongest extension encountered so far. If two or more \n                       extensions have the same strength, the one that appears earlier \n                       in the list takes precedence.\n\n    Output Format: The function returns a string in the format \"ClassName.StrongestExtensionName\".\n\n    Example:\n    Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA' \n    Explanation:\n      - 'AA' has a strength of 2 (2 uppercase, 0 lowercase).\n      - 'Be' has a strength of 0 (1 uppercase, 1 lowercase).\n      - 'CC' has a strength of 2 (2 uppercase, 0 lowercase).\n      'AA' is chosen as the strongest extension because it appears first in the list.\n    \"\"\"\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "```python\ndef cycpattern_check(a , b):\n    \"\"\"\n    It is posited that a function can be constructed to definitively determine \n    whether a given word 'b,' or any of its cyclic rotations, exists as a substring \n    within another word 'a.'\n\n    The provided code presents a compelling argument in support of this assertion. \n    It employs a systematic approach:\n\n    1. Cyclic Extension: The function cleverly concatenates the word 'b' with itself, \n       creating an extended pattern 'pat' that encapsulates all possible cyclic rotations.\n\n    2. Substring Comparison:  It meticulously compares substrings of length 'b' within \n       word 'a' to substrings of the same length within the extended pattern 'pat'.  \n\n    3. Early Exit: Upon encountering a match, signifying the presence of 'b' or one of \n       its rotations as a substring within 'a', the function confidently declares True, \n       terminating its search.\n\n    4. Exhaustive Search: If no match is found after comprehensively examining all \n       possible substring alignments, the function conclusively declares False, \n       affirming the absence of the sought-after pattern.\n\n    Therefore, the provided code demonstrably establishes the feasibility of \n    constructing a function to achieve the stated objective.\n    \"\"\"\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n```\n\n\n\n\n\n\n\n\n\n", "```python\ndef even_odd_count(num):\n    \"\"\"\n    Let's play a number game!  You give me a number, and I'll tell you \n    how many even digits and how many odd digits it has.  It's like \n    sorting numbers into two teams! \n\n    Remember:\n      - Even numbers are like 2, 4, 6, 8... they like to be in pairs. \n      - Odd numbers are like 1, 3, 5, 7... they like to be by themselves.\n\n    I'll give you back two numbers \u2013 the first one tells you how many \n    even digits there are, and the second one tells you how many odd \n    digits there are.  It's like keeping score for the number teams! \n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n```\n\n\n\n\n\n\n\n\n", "```python\ndef int_to_mini_roman(number):\n    \"\"\"\n    From the depths of antiquity, a numerical system emerges \u2013 the Roman numerals, \n    a testament to an empire's legacy.  This function, a conduit to that ancient \n    world, takes a modern integer and transmutes it into its Roman equivalent, \n    casting it in the humble guise of lowercase letters.\n\n    Like a scribe meticulously etching symbols onto parchment, it navigates \n    a table of values and their corresponding Roman glyphs.  It deconstructs \n    the input number, carefully extracting its components and weaving them \n    into a tapestry of Roman characters.\n\n    The result, a whispered echo of a bygone era, stands as a testament to \n    the enduring power of symbols and the legacy of a civilization that \n    shaped the world.\n    \"\"\"\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n```\n\n\n\n\n\n\n\n", "```python\ndef right_angle_triangle(a, b, c):\n    \"\"\"\n    This function determines if three given side lengths ('a', 'b', 'c') can form \n    a right-angled triangle.\n\n    Right-Angled Triangle: A triangle where one of the angles is a right angle (90 degrees).\n\n    The function uses the Pythagorean theorem to check if the side lengths satisfy \n    the condition a\u00b2 + b\u00b2 = c\u00b2, where 'c' is the longest side (hypotenuse). \n\n    Examples:\n    right_angle_triangle(3, 4, 5) == True  (3\u00b2 + 4\u00b2 = 5\u00b2)\n    right_angle_triangle(1, 2, 3) == False (No combination of sides satisfies the theorem)\n    \"\"\"\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n```\n\n\n\n\n\n\n", "```python\ndef find_max(words):\n    \"\"\"\n    In a land where words hold power, a quest begins to find the word with \n    the greatest diversity of letters. This function is our intrepid explorer, \n    venturing into a list of words to uncover the one with the most unique characters.\n\n    Like a meticulous linguist, it examines each word, carefully counting \n    its distinct letters.  If multiple words share the honor of having the \n    most unique characters, the function, with a keen eye for order, selects \n    the one that comes first alphabetically.\n\n    The chosen word, a testament to lexical richness, emerges as the champion, \n    a beacon of linguistic variety.\n    \"\"\"\n    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n```\n\n\n\n\n\n\n\n\n\n\n\n", "```python\ndef eat(number, need, remaining):\n    \"\"\"\n    This function simulates a hungry rabbit eating carrots.  \n\n    - 'number' is the number of carrots already eaten.\n    - 'need' is the number of carrots the rabbit still wants to eat.\n    - 'remaining' is the number of carrots available.\n\n    The function returns a list:\n     - The first element is the total number of carrots eaten \n       (including those already eaten).\n     - The second element is the number of carrots left over.\n\n    If there aren't enough carrots to satisfy 'need', the rabbit \n    eats all the 'remaining' carrots. \n\n    Examples:\n    eat(5, 6, 10) -> [11, 4]  (Eats all it needs, 4 left over)\n    eat(2, 11, 5) -> [7, 0]  (Eats all remaining, none left) \n    \"\"\"\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n```\n\n\n\n\n\n\n\n\n\n\n\n", "```python\ndef do_algebra(operator, operand):\n    \"\"\"\n    This function constructs and evaluates an algebraic expression based on \n    two input lists:\n\n    - 'operator': A list of strings representing basic arithmetic operators \n      (+, -, *, //, **).\n    - 'operand': A list of non-negative integers representing operands.\n\n    The function iterates through the operator and operand lists concurrently, \n    combining them to form a string representation of the algebraic expression. \n    It then utilizes the 'eval' function in Python to evaluate this expression \n    and returns the numerical result.\n\n    It is important to note that the length of the 'operator' list is always \n    one less than the length of the 'operand' list to ensure a valid expression.\n\n    Example:\n    For operator = ['+', '*', '-'] and operand = [2, 3, 4, 5], the constructed \n    expression would be \"2 + 3 * 4 - 5\", and the function would return 9 as the result.\n    \"\"\"\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n```\n\n\n\n\n\n\n\n\n\n", "```python\ndef solve(s):\n    \"\"\"\n    This function processes a string 's' based on the following rules:\n\n    1. Case Reversal: For each character in the string, if it's a letter, \n       its case is reversed (lowercase to uppercase or vice versa).  \n       Non-letter characters remain unchanged.\n\n    2. String Reversal: If the entire string contains no letters, the \n       string is reversed.\n\n    The function returns the modified string.\n\n    Examples:\n    solve(\"1234\") == \"4321\"  (No letters, so the string is reversed)\n    solve(\"ab\") == \"AB\"     (Letters are reversed in case)\n    solve(\"#a@C\") == \"#A@c\"   (Letters are reversed in case, other characters stay the same)\n    \"\"\"\n    new_str = list(s)\n    has_letters = False \n\n    for idx, char in enumerate(s):\n        if char.isalpha():\n            new_str[idx] = char.swapcase()\n            has_letters = True\n\n    if not has_letters:\n        return s[::-1]  # Reverse the entire string\n    else:\n        return \"\".join(new_str)  # Join the modified characters back into a string\n```\n\n\n\n\n\n\n\n", "```python\ndef string_to_md5(text):\n    \"\"\"\n    This function calculates the MD5 hash of a given string and returns \n    the hexadecimal representation of the hash. If the input string is \n    empty, it returns None.\n\n    MD5 Hash:  MD5 (Message Digest Algorithm 5) is a widely used cryptographic \n                hash function that produces a 128-bit hash value. It's often used \n                to verify data integrity.\n\n    Hexadecimal Representation: The MD5 hash is typically represented as a \n                                 32-character hexadecimal string.\n\n    Example:\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n```\n\n\n\n", "```python\ndef generate_integers(a, b):\n    \"\"\"\n    This function takes two positive integers, 'a' and 'b,' as input and \n    returns a list of all even numbers within the inclusive range between \n    'a' and 'b', sorted in ascending order.\n\n    However, the function only considers even numbers within the range of \n    2 to 8. If 'a' or 'b' falls outside this range, the function adjusts \n    the range accordingly.\n\n    Here's a breakdown of the steps:\n\n    1. Range Adjustment: The function first ensures that the lower bound of the \n       range is at least 2 and the upper bound is at most 8.  It does this \n       by using the 'min' and 'max' functions to adjust 'a' and 'b' if necessary.\n\n    2. Even Number Generation: It then iterates through the adjusted range, \n       selecting only the even numbers (those divisible by 2) and adding them \n       to a list.\n\n    3. Sorting: Finally, it returns the list of even numbers, sorted in ascending order.\n\n    Example:\n    generate_integers(1, 10) => [2, 4, 6, 8]\n    (The range is adjusted from 1-10 to 2-8, and the even numbers within that range are returned.)\n    \"\"\"\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n```\n\n\n\n\n\n\n\n\n\n\n\n"]